//
//  Activity.swift
//  higi
//
//  Created by Remy Panicker on 4/29/16.
//  Copyright Â© 2016 higi, LLC. All rights reserved.
//

import HealthKit

/**
 *  Represents a recorded event which qualifies as a recognized activity.
 */
struct Activity: UniquelyIdentifiable {
    
    // MARK: Required
    
    /// Unique identifier.
    let identifier: UniqueId
    
    /// Categories this activity falls under.
    let categories: [Category]
    
    /// Unique identifier for user this activity is for.
    let userId: String
    
    /// Unique identifier of service which recorded the activity.
    let serviceId: Activity.Service.Identifier
    
    /// Date the activity took place (localized).
    let date: NSDate
    
    /// Date the activity took place (UTC).
    let dateUTC: NSDate
    
    /// Date the activity was last updated (UTC).
    let updateDateUTC: NSDate
    
    /// Whether or not the activity was reported by the user as opposed to a service/device.
    let selfReported: Bool
    
    /// Metric measurements and activity metadata.
    let metadata: Activity.Metadata
    
    // MARK: Optional
    
    /// Unique identifier of device which recorded the activity.
    let deviceId: Device.Identifier?
    
    /// higi watts generated by this activity.
    let watts: Int?
}

extension Activity: JSONInitializable {
    
    init?(dictionary: NSDictionary) {
        guard let identifier = dictionary["id"] as? String,
            let categoryCollection = dictionary["categories"] as? NSArray,
            let userId = dictionary["userId"] as? String,
            let serviceId = Activity.Service.Identifier(rawJSONValue: dictionary["serviceId"]),
            let date = NSDateFormatter.ISO8601DateFormatter.date(fromObject: dictionary["timestamp"]),
            let dateUTC = NSDateFormatter.ISO8601DateFormatter.date(fromObject: dictionary["timestampUTC"]),
            let updateDateUTC = NSDateFormatter.ISO8601DateFormatter.date(fromObject: dictionary["updatedUTC"]),
            let selfReported = dictionary["selfReported"] as? Bool,
            let metadata = Activity.Metadata(fromJSONObject: dictionary["metrics"]) else { return nil }
        
        self.identifier = identifier
        self.userId = userId
        self.serviceId = serviceId
        self.date = date
        self.dateUTC = dateUTC
        self.updateDateUTC = updateDateUTC
        self.selfReported = selfReported
        self.metadata = metadata
        
        self.categories = categoryCollection.flatMap(Category.init)
        
        self.deviceId = Device.Identifier(rawJSONValue: dictionary["deviceId"])
        self.watts = dictionary["watts"] as? Int
    }
}
